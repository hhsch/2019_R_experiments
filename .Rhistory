D[nu*nv - floor(buv)])
print(paste(paste0((1-a)*100, "%"), "CI for", u, "vs", v, "is:"))
print(paste("    [", ci[1], ", ", ci[2], ")", sep=""))
} # end u
} # end v
}
critchlow.test(y, x, alpha=.9)
critchlow.test(y, x, alpha=.91)
critchlow.test <- function(y, g, alpha) {
# This function motivated by stats::pairwise.t.test
# Parameters:
#             y = response data
#             g = vector of groups
#             alpha = desired level alpha (this function will return a conservative CI)
# Copy of NSM3::cSDFlig
cSDFlig <- function (alpha, n, method = NA, n.mc = 10000)
{
outp <- list()
outp$stat.name <- "Dwass, Steel, Critchlow-Fligner W"
if (alpha > 1 || alpha < 0 || class(alpha) != "numeric") {
cat("Error: Check alpha value! \n")
return(alpha)
}
outp$n.mc <- n.mc
outp$n <- l <- n
outp$alpha <- alpha
k <- length(n)
N <- sum(n)
g <- rep(1:k, n)
if (is.na(method)) {
if (factorial(sum(outp$n))/prod(factorial(outp$n)) <=
10000) {
method <- "Exact"
}
if (factorial(sum(outp$n))/prod(factorial(outp$n)) >
10000) {
method <- "Monte Carlo"
}
}
outp$method <- method
outp$num.comp <- num.comp <- k * (k - 1)/2
W.star.calc <- function(x, i, j) {
group.sizes <- l[c(i, j)]
W.stat <- sum(rank(c(x[g == i], x[g == j]))[(group.sizes[1] +
1):sum(group.sizes)])
W.mean <- group.sizes[2] * (sum(group.sizes) + 1)/2
tie.vec <- as.numeric(table(c(x[g == i], x[g == j])))
W.var <- prod(group.sizes)/24 * (sum(group.sizes) + 1 -
sum((tie.vec - 1) * tie.vec * (tie.vec + 1)/(sum(group.sizes) *
(sum(group.sizes) - 1))))
(W.stat - W.mean)/sqrt(W.var)
}
W.star.all <- function(x) {
W.star.vec <- numeric(num.comp)
count <- 1
for (i in 1:(k - 1)) {
for (j in (i + 1):k) {
W.star.vec[count] <- W.star.calc(x, i, j)
count <- count + 1
}
}
W.star.vec
}
if (method == "Exact") {
possible.combs <- multComb(outp$n)
exact.dist <- round(apply(possible.combs, 1, function(x) max(abs(W.star.all(x)))),
9)
values <- sort(unique(exact.dist))
prob.dist <- as.numeric(table(exact.dist))/sum(as.numeric(table(exact.dist)))
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Monte Carlo") {
mc.dist <- numeric(n.mc)
for (i in 1:n.mc) {
mc.order <- as.numeric(sample(1:N, N))
mc.dist[i] <- max(abs(W.star.all(mc.order)))
}
values <- sort(unique(mc.dist))
prob.dist <- as.numeric(table(mc.dist))/n.mc
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Asymptotic") {
outp$cutoff.U <- cRangeNor(alpha, k)
}
class(outp) <- "NSM3Ch6MCc"
outp
}
# End cSDFlig
# -----
x <- as.factor(g)
a <- alpha
# Get w*_a value
n <- aggregate(y, by=list(x), FUN=length)$x
W <- cSDCFlig(a/2, n)
wa <- W$cutoff.U
a <- 2*W$true.alpha.U
# Groups to compare
lev <- levels(x)
# Make comparisons
for (v in lev[2:length(lev)]) {
yv <- y[x == v]
nv <- length(yv)
for (u in lev) {
if (u == v) { break } # Stop when u gets to v
yu <- y[x == u]
nu <- length(yu)
D <- vector() # Empty vector
# Fill the vector with differences
for (yjv in yv) {
for (yiu in yu) {
D <- c(D, yjv - yiu)
}
}
D <- sort(D)
auv <- (1 + nu*nv/2
- wa*sqrt( nu*nv*(nu+nv+1)/24 ) )
buv <- auv - 1
ci <- c(D[floor(auv)],
D[nu*nv - floor(buv)])
print(paste(paste0((1-a)*100, "%"), "CI for", u, "vs", v, "is:"))
print(paste("    [", ci[1], ", ", ci[2], ")", sep=""))
} # end u
} # end v
}
critchlow.test(y, x, alpha=.91)
critchlow.test <- function(y, g, alpha) {
# This function motivated by stats::pairwise.t.test
# Parameters:
#             y = response data
#             g = vector of groups
#             alpha = desired level alpha (this function will return a conservative CI)
# Copy of NSM3::cSDFlig
cSDFlig <- function (alpha, n, method = NA, n.mc = 10000)
{
outp <- list()
outp$stat.name <- "Dwass, Steel, Critchlow-Fligner W"
if (alpha > 1 || alpha < 0 || class(alpha) != "numeric") {
cat("Error: Check alpha value! \n")
return(alpha)
}
outp$n.mc <- n.mc
outp$n <- l <- n
outp$alpha <- alpha
k <- length(n)
N <- sum(n)
g <- rep(1:k, n)
if (is.na(method)) {
if (factorial(sum(outp$n))/prod(factorial(outp$n)) <=
10000) {
method <- "Exact"
}
if (factorial(sum(outp$n))/prod(factorial(outp$n)) >
10000) {
method <- "Monte Carlo"
}
}
outp$method <- method
outp$num.comp <- num.comp <- k * (k - 1)/2
W.star.calc <- function(x, i, j) {
group.sizes <- l[c(i, j)]
W.stat <- sum(rank(c(x[g == i], x[g == j]))[(group.sizes[1] +
1):sum(group.sizes)])
W.mean <- group.sizes[2] * (sum(group.sizes) + 1)/2
tie.vec <- as.numeric(table(c(x[g == i], x[g == j])))
W.var <- prod(group.sizes)/24 * (sum(group.sizes) + 1 -
sum((tie.vec - 1) * tie.vec * (tie.vec + 1)/(sum(group.sizes) *
(sum(group.sizes) - 1))))
(W.stat - W.mean)/sqrt(W.var)
}
W.star.all <- function(x) {
W.star.vec <- numeric(num.comp)
count <- 1
for (i in 1:(k - 1)) {
for (j in (i + 1):k) {
W.star.vec[count] <- W.star.calc(x, i, j)
count <- count + 1
}
}
W.star.vec
}
if (method == "Exact") {
possible.combs <- multComb(outp$n)
exact.dist <- round(apply(possible.combs, 1, function(x) max(abs(W.star.all(x)))),
9)
values <- sort(unique(exact.dist))
prob.dist <- as.numeric(table(exact.dist))/sum(as.numeric(table(exact.dist)))
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Monte Carlo") {
mc.dist <- numeric(n.mc)
for (i in 1:n.mc) {
mc.order <- as.numeric(sample(1:N, N))
mc.dist[i] <- max(abs(W.star.all(mc.order)))
}
values <- sort(unique(mc.dist))
prob.dist <- as.numeric(table(mc.dist))/n.mc
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Asymptotic") {
outp$cutoff.U <- cRangeNor(alpha, k)
}
class(outp) <- "NSM3Ch6MCc"
outp
}
# End cSDFlig
# -----
x <- as.factor(g)
a <- alpha
# Get w*_a value
n <- aggregate(y, by=list(x), FUN=length)$x
W <- cSDCFlig(a/2, n)
wa <- W$cutoff.U
a <- W$true.alpha.U/2
# Groups to compare
lev <- levels(x)
# Make comparisons
for (v in lev[2:length(lev)]) {
yv <- y[x == v]
nv <- length(yv)
for (u in lev) {
if (u == v) { break } # Stop when u gets to v
yu <- y[x == u]
nu <- length(yu)
D <- vector() # Empty vector
# Fill the vector with differences
for (yjv in yv) {
for (yiu in yu) {
D <- c(D, yjv - yiu)
}
}
D <- sort(D)
auv <- (1 + nu*nv/2
- wa*sqrt( nu*nv*(nu+nv+1)/24 ) )
buv <- auv - 1
ci <- c(D[floor(auv)],
D[nu*nv - floor(buv)])
print(paste(paste0((1-a)*100, "%"), "CI for", u, "vs", v, "is:"))
print(paste("    [", ci[1], ", ", ci[2], ")", sep=""))
} # end u
} # end v
}
critchlow.test(y, x, alpha=.91)
critchlow.test <- function(y, g, alpha) {
# This function motivated by stats::pairwise.t.test
# Parameters:
#             y = response data
#             g = vector of groups
#             alpha = desired level alpha (this function will return a conservative CI)
# Copy of NSM3::cSDFlig
cSDFlig <- function (alpha, n, method = NA, n.mc = 10000)
{
outp <- list()
outp$stat.name <- "Dwass, Steel, Critchlow-Fligner W"
if (alpha > 1 || alpha < 0 || class(alpha) != "numeric") {
cat("Error: Check alpha value! \n")
return(alpha)
}
outp$n.mc <- n.mc
outp$n <- l <- n
outp$alpha <- alpha
k <- length(n)
N <- sum(n)
g <- rep(1:k, n)
if (is.na(method)) {
if (factorial(sum(outp$n))/prod(factorial(outp$n)) <=
10000) {
method <- "Exact"
}
if (factorial(sum(outp$n))/prod(factorial(outp$n)) >
10000) {
method <- "Monte Carlo"
}
}
outp$method <- method
outp$num.comp <- num.comp <- k * (k - 1)/2
W.star.calc <- function(x, i, j) {
group.sizes <- l[c(i, j)]
W.stat <- sum(rank(c(x[g == i], x[g == j]))[(group.sizes[1] +
1):sum(group.sizes)])
W.mean <- group.sizes[2] * (sum(group.sizes) + 1)/2
tie.vec <- as.numeric(table(c(x[g == i], x[g == j])))
W.var <- prod(group.sizes)/24 * (sum(group.sizes) + 1 -
sum((tie.vec - 1) * tie.vec * (tie.vec + 1)/(sum(group.sizes) *
(sum(group.sizes) - 1))))
(W.stat - W.mean)/sqrt(W.var)
}
W.star.all <- function(x) {
W.star.vec <- numeric(num.comp)
count <- 1
for (i in 1:(k - 1)) {
for (j in (i + 1):k) {
W.star.vec[count] <- W.star.calc(x, i, j)
count <- count + 1
}
}
W.star.vec
}
if (method == "Exact") {
possible.combs <- multComb(outp$n)
exact.dist <- round(apply(possible.combs, 1, function(x) max(abs(W.star.all(x)))),
9)
values <- sort(unique(exact.dist))
prob.dist <- as.numeric(table(exact.dist))/sum(as.numeric(table(exact.dist)))
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Monte Carlo") {
mc.dist <- numeric(n.mc)
for (i in 1:n.mc) {
mc.order <- as.numeric(sample(1:N, N))
mc.dist[i] <- max(abs(W.star.all(mc.order)))
}
values <- sort(unique(mc.dist))
prob.dist <- as.numeric(table(mc.dist))/n.mc
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Asymptotic") {
outp$cutoff.U <- cRangeNor(alpha, k)
}
class(outp) <- "NSM3Ch6MCc"
outp
}
# End cSDFlig
# -----
x <- as.factor(g)
a <- alpha
# Get w*_a value
n <- aggregate(y, by=list(x), FUN=length)$x
W <- cSDCFlig(a/2, n)
wa <- W$cutoff.U
a <- W$true.alpha.U
# Groups to compare
lev <- levels(x)
# Make comparisons
for (v in lev[2:length(lev)]) {
yv <- y[x == v]
nv <- length(yv)
for (u in lev) {
if (u == v) { break } # Stop when u gets to v
yu <- y[x == u]
nu <- length(yu)
D <- vector() # Empty vector
# Fill the vector with differences
for (yjv in yv) {
for (yiu in yu) {
D <- c(D, yjv - yiu)
}
}
D <- sort(D)
auv <- (1 + nu*nv/2
- wa*sqrt( nu*nv*(nu+nv+1)/24 ) )
buv <- auv - 1
ci <- c(D[floor(auv)],
D[nu*nv - floor(buv)])
print(paste(paste0((1-2*a)*100, "%"), "CI for", u, "vs", v, "is:"))
print(paste("    [", ci[1], ", ", ci[2], ")", sep=""))
} # end u
} # end v
}
critchlow.test(y, x, alpha=.91)
?cSDFlig
?cSDFlig
?cSDCFlig
critchlow.test(y, x, alpha=(1-.91))
critchlow.test <- function(y, g, alpha) {
# This function motivated by stats::pairwise.t.test
# Parameters:
#             y = response data
#             g = vector of groups
#             alpha = desired level alpha (this function will return a conservative CI)
# Copy of NSM3::cSDFlig
cSDFlig <- function (alpha, n, method = NA, n.mc = 10000)
{
outp <- list()
outp$stat.name <- "Dwass, Steel, Critchlow-Fligner W"
if (alpha > 1 || alpha < 0 || class(alpha) != "numeric") {
cat("Error: Check alpha value! \n")
return(alpha)
}
outp$n.mc <- n.mc
outp$n <- l <- n
outp$alpha <- alpha
k <- length(n)
N <- sum(n)
g <- rep(1:k, n)
if (is.na(method)) {
if (factorial(sum(outp$n))/prod(factorial(outp$n)) <=
10000) {
method <- "Exact"
}
if (factorial(sum(outp$n))/prod(factorial(outp$n)) >
10000) {
method <- "Monte Carlo"
}
}
outp$method <- method
outp$num.comp <- num.comp <- k * (k - 1)/2
W.star.calc <- function(x, i, j) {
group.sizes <- l[c(i, j)]
W.stat <- sum(rank(c(x[g == i], x[g == j]))[(group.sizes[1] +
1):sum(group.sizes)])
W.mean <- group.sizes[2] * (sum(group.sizes) + 1)/2
tie.vec <- as.numeric(table(c(x[g == i], x[g == j])))
W.var <- prod(group.sizes)/24 * (sum(group.sizes) + 1 -
sum((tie.vec - 1) * tie.vec * (tie.vec + 1)/(sum(group.sizes) *
(sum(group.sizes) - 1))))
(W.stat - W.mean)/sqrt(W.var)
}
W.star.all <- function(x) {
W.star.vec <- numeric(num.comp)
count <- 1
for (i in 1:(k - 1)) {
for (j in (i + 1):k) {
W.star.vec[count] <- W.star.calc(x, i, j)
count <- count + 1
}
}
W.star.vec
}
if (method == "Exact") {
possible.combs <- multComb(outp$n)
exact.dist <- round(apply(possible.combs, 1, function(x) max(abs(W.star.all(x)))),
9)
values <- sort(unique(exact.dist))
prob.dist <- as.numeric(table(exact.dist))/sum(as.numeric(table(exact.dist)))
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Monte Carlo") {
mc.dist <- numeric(n.mc)
for (i in 1:n.mc) {
mc.order <- as.numeric(sample(1:N, N))
mc.dist[i] <- max(abs(W.star.all(mc.order)))
}
values <- sort(unique(mc.dist))
prob.dist <- as.numeric(table(mc.dist))/n.mc
upper.tails <- cbind(rev(values), cumsum(rev(prob.dist)))
outp$cutoff.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 1]
outp$true.alpha.U <- upper.tails[max(which(upper.tails[,
2] <= alpha)), 2]
}
if (method == "Asymptotic") {
outp$cutoff.U <- cRangeNor(alpha, k)
}
class(outp) <- "NSM3Ch6MCc"
outp
}
# End cSDFlig
# -----
x <- as.factor(g)
a <- alpha
# Get w*_a value
n <- aggregate(y, by=list(x), FUN=length)$x
W <- cSDCFlig(a/2, n)
wa <- W$cutoff.U
a <- 2*W$true.alpha.U
# Groups to compare
lev <- levels(x)
# Make comparisons
for (v in lev[2:length(lev)]) {
yv <- y[x == v]
nv <- length(yv)
for (u in lev) {
if (u == v) { break } # Stop when u gets to v
yu <- y[x == u]
nu <- length(yu)
D <- vector() # Empty vector
# Fill the vector with differences
for (yjv in yv) {
for (yiu in yu) {
D <- c(D, yjv - yiu)
}
}
D <- sort(D)
auv <- (1 + nu*nv/2
- wa*sqrt( nu*nv*(nu+nv+1)/24 ) )
buv <- auv - 1
ci <- c(D[floor(auv)],
D[nu*nv - floor(buv)])
print(paste(paste0((1-a)*100, "%"), "CI for", u, "vs", v, "is:"))
print(paste("    [", ci[1], ", ", ci[2], ")", sep=""))
} # end u
} # end v
}
critchlow.test(y, x, alpha=(1-.91))
